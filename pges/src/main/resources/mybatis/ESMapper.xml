<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.pges.dao.ESMapper">
    <select id="hasIndex" resultType="integer">
        select count(1) from me.es_index where word = #{word} and code = #{code}
    </select>

    <select id="getIdsByWordAndCode" resultType="object">
        select ids from me.es_index where word = #{word} and code = #{code}
    </select>

    <update id="updateIndex">
        update me.es_index set ids = #{esIndex.ids} where id = #{esIndex.id}
    </update>

    <select id="getByWordAndCode" resultType="org.example.pges.entity.po.ESIndexPo">
        select * from me.es_index where word = #{word} and code = #{code}
    </select>

    <insert id="insertIndex">
        insert into me.es_index (word,code,begin_time,end_time,ids,id) values
        <foreach collection="esIndexPos" separator=","  item="esIndexPo">
            (#{esIndexPo.word},#{esIndexPo.code},#{esIndexPo.beginTime},#{esIndexPo.endTime},#{esIndexPo.ids},#{esIndexPo.id})
        </foreach>
    </insert>

    <select id="searchByParam" resultType="org.example.pges.entity.po.BusinessPO">
        select bus.* from me.business bus where out_emr_detail_id in (
            select unnest(ids) as ids from me.es_index idx
            where
            <foreach collection="param.text" separator="or" item="word">
                (idx.word like concat('%',#{word},'%'))
            </foreach>
            and (
                (idx.begin_time &lt;= #{param.beginTime} and idx.end_time &gt;= #{param.beginTime})
                or
                (idx.end_time &lt;= #{param.endTime} and idx.begin_time &gt;= #{param.endTime})
                or
                (idx.begin_time &gt;= #{param.beginTime} and idx.end_time &lt; #{param.endTime})
                )
        )
        and bus.create_time &gt;= #{param.beginTime}
        and bus.create_time &lt;= #{param.endTime}
    </select>


    <select id="getLeastIndex" resultType="java.lang.String">
        SELECT word
        FROM
        (
            SELECT word,MAX ( array_length( ids, 1 ) ) AS max_length,
                        SUM ( array_length( ids, 1 ) ) AS sum_length,
                        COUNT ( word ) AS word_count
            FROM me.es_index
            GROUP BY word
        ) AS subquery
        WHERE word_count >= 2 AND max_length &lt;= 1000
        ORDER BY sum_length limit 500
    </select>
</mapper>